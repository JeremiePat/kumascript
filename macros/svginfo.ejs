<%
/**
 * Displays general information about an SVG element
 *
 * PARAMS:
 * $0 - SVG element name - defaults to the slug name (optional, uses last part of URL as default)
 */


// Base macro set up
// ----------------------------------------------------------------------------

var isPreview = "preview-wiki-content";

// Check params
var slug = env.slug;
var name = $0 || (slug ? slug.split("/").pop() : isPreview);

// Get data
var data    = string.deserialize(template("SVGData"));
var svgInfo = data.elements[name];

// Utilities
var _  = mdn.localString;    // Handle one level object like { "en-US":"Foo" }
var __ = mdn.getLocalString; // Handle two level object like { "foo": { "en-US": "Bar" }}

// L10n Strings
var localStrings       = string.deserialize(template("L10n:SVG"));
var HTMLStrings        = string.deserialize(template("L10n:HTML"));
var commonLocalStrings = string.deserialize(template("L10n:Common"));

var l10n = {
    separator:        __(commonLocalStrings, "listSeparator"),
    categories:       __(localStrings, "categories"),
    domInterface:     __(HTMLStrings, "domInterface"),
    permittedContent: __(localStrings, "permittedContent"),
    error: name === isPreview ?
        __(localStrings, "info_in_preview_not_available") :
        __(localStrings, "missing")
}


// Macro logic
// ----------------------------------------------------------------------------

var result = "";

if (svgInfo) {
    var properties = [];

    // Add categories
    var categories = svgInfo.categories.map(function(category) {
        return __(localStrings, category);
    });

    properties.push({
        label: l10n.categories,
        value: categories.join(l10n.separator)
    });

    // Add permitted content
    var permittedContent = [];

    if (typeof svgInfo.content.description === "string") {
        permittedContent.push(__(localStrings, svgInfo.content.description));
    } else {
        permittedContent.push(_(svgInfo.content.description));
    }

    if (svgInfo.content.elements) {
        var elementGroups = [];
        var elements = [];

        svgInfo.content.elements.forEach(function (element) {
            // Handle single element
            if (element.indexOf("&lt;") !== -1) {
                elements.push(template(
                    "SVGElement",
                    [element.replace(/&lt;|&gt;/g, "")]
                ));

            // Handle named group of elements
            } else {
                var anchor = element
                    // Turn camelCase into snake_case
                    .replace(/[A-Z]/g, function(match) {
                        return "_" + match.toLowerCase();
                    })
                    // Capitalize first letter
                    .replace(/^./, function(match) {
                        return match.toUpperCase();
                    });

                elementGroups.push([
                    "<a href=\"/", env.locale,
                    "/docs/Web/SVG/Element#", anchor, "\">",
                    __(localStrings, element), "</a>"
                ].join(''));
            }
        })

        if (elementGroups.length !== 0) {
            permittedContent.push(elementGroups.join("<br/>"));
        }

        if (elements.length !== 0) {
            permittedContent.push(elements.join(l10n.separator));
        }
    }

    properties.push({
        label: l10n.permittedContent,
        value: permittedContent.join("<br/>")
    });

    // Add DOM Interface
    var interfaces = svgInfo.interfaces.map(function (api) {
        return template("domxref", [api]);
    });

    properties.push({
        label: l10n.domInterface,
        value: interfaces.join()
    });

    // Format properties as HTML
    result = template("propertiesbox", [string.serialize(properties)]);

// Handle the case where we haven't any info available
} else {
    result = ["<span style=\"color:red;\">", l10n.error, "</span>"].join('')
}

// Display result
// ----------------------------------------------------------------------------
%><%- result %>
